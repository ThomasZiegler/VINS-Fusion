%YAML:1.0

#common parameters
imu: 1
num_of_cam: 2  # 1 or 2

imu_topic: "/pegasus/imu0"
image0_topic: "/pegasus/cam0/image_raw"
image1_topic: "/pegasus/cam1/image_raw"
output_path: "/home/yves/Documents/Data/"
world_frame: "world"

cam0_calib: "23026_cam_0.yaml"
cam1_calib: "23026_cam_1.yaml"
image_width: 752
image_height: 480

# Extrinsic parameter between IMU and Camera.
estimate_extrinsic: 0   # 0  Have an accurate extrinsic parameters. We will trust the following imu^R_cam, imu^T_cam, don't change it.
                        # 1  Have an initial guess about extrinsic parameters. We will optimize around your initial guess.
                        # 2  Don't know anything about extrinsic parameters. You don't need to give R,T. We will try to calibrate it. Do some rotation movement at beginning.
#If you choose 0 or 1, you should write down the following matrix.

#cam0 to body
body_T_cam0: !!opencv-matrix
   rows: 4
   cols: 4
   dt: d
#   data: [0, 0, 1, 0.015,
#          -1, 0, 0, 0.055,
#          0, -1, 0, 0.0065,
#          0, 0, 0, 1]

 #   data: [ 9.99995865e-01, -2.75573180e-03, -8.22209717e-04,  3.65146792e-02,
 #           2.75346054e-03,  9.99992426e-01, -2.75084212e-03, -7.83083935e-03,
 #           8.29784072e-04,  2.74856682e-03,  9.99995878e-01,  2.35134960e-04,
 #           0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  1.00000000e+00]
   data: [0.9999958649481703, 0.002753460541627872, 0.0008297840722003311, -0.0364931613814093,
          -0.0027557317979724104, 0.9999924256326489, 0.0027485668245068456, 0.007930758410019998,
          -0.0008222097168136392, -0.002750842121393782, 0.9999958784109086, -0.00022665266974171913,
          0, 0, 0, 1]

#	R: 	 0, -sin(pitch),  cos(pitch)
#		-1,	      0,           0
#		 0, -cos(pitch), -sin(pitch)

#cam1 to body
body_T_cam1: !!opencv-matrix
   rows: 4
   cols: 4
   dt: d
#   data: [0, 0, 1, 0.015,
#          -1, 0, 0, -0.055,
#          0, -1, 0, 0.0065,
#          0, 0, 0, 1]

   #   data: [ 9.99980590e-01, -4.86734031e-03,  3.88964117e-03, -7.33893103e-02,
   #           4.88324769e-03,  9.99979710e-01, -4.09069926e-03, -8.22947920e-03,
   #          -3.86965142e-03,  4.10961394e-03,  9.99984068e-01, -1.27846281e-06,
   #           0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  1.00000000e+00]
   data: [0.9999805896565428, 0.004883247690398199, -0.003869651424535456, 0.07342806744613586,
          -0.004867340311783546, 0.9999797098299329, 0.004109613939611598, 0.007872106731060325,
          0.003889641171428988, -0.004090699260222361, 0.9999840683086507, 0.0002530722009148248,
          0, 0, 0, 1]

#Invert transforms: 0 use as given, 1 invert
invert: 1

#Multiple thread support
multiple_thread: 1

#feature traker paprameters
max_cnt: 200            # max feature number in feature tracking
min_dist: 20            # min distance between two features
freq: 10                # frequence (Hz) of publish tracking result. At least 10Hz for good estimation. If set 0, the frequence will be same as raw image
F_threshold: 1.0        # ransac threshold (pixel)
show_track: 1           # publish tracking image as topic
flow_back: 1            # perform forward and backward optical flow to improve feature tracking accuracy

#optimization parameters
max_solver_time: 0.035  # max solver itration time (ms), to guarantee real time
max_num_iterations: 8   # max solver itrations, to guarantee real time
keyframe_parallax: 10.0 # keyframe selection threshold (pixel)

#imu parameters       The more accurate parameters you provide, the better performance
acc_n: 0.1          # accelerometer measurement noise standard deviation. #0.2
gyr_n: 0.01         # gyroscope measurement noise standard deviation.     #0.05
acc_w: 0.001         # accelerometer bias random work noise standard deviation.  #0.02
gyr_w: 0.0001       # gyroscope bias random work noise standard deviation.     #4.0e-5
g_norm: 9.81007     # gravity magnitude

#unsynchronization parameters
estimate_td: 0                      # online estimate time offset between camera and imu
td: 0.0010984817601322951           # initial value of time offset. unit: s. readed image clock + td = real image clock (IMU clock)

#visualization parameters
save_image: 0                   # save image in pose graph for visualization prupose; you can close this function by setting 0
visualize_imu_forward: 0        # output imu forward propogation to achieve low latency and high frequence results
visualize_camera_size: 0.4      # size of camera marker in RVIZ
